{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","areaName","Array","useState","city","setCity","key","corona","undefined","countryName","push","kr","en","data","setData","useEffect","totalCase","parseInt","replaceAll","newCase","recovered","death","care","console","log","name","인원","추가","className","newCcase","newFcase","onChange","e","target","value","map","tit","percentage","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","stackId","fill","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"m6GA6IeA,MA9Hf,WACE,IAAIC,EAAW,IAAIC,MADN,EAESC,mBAAS,SAFlB,mBAERC,EAFQ,KAEFC,EAFE,KAGb,IAAK,IAAIC,KAAOC,OAGiBC,GAA3BD,EAAOD,GAAKG,aACdR,EAASS,KAAK,CAAEC,GAAIJ,EAAOD,GAAKG,YAAaG,GAAIN,IAIrD,IAXa,EAeWH,qBAfX,mBAeNU,EAfM,KAeAC,EAfA,KA4Cb,OA3BAC,qBAAU,WACR,IAAIC,EAAYC,SAASV,EAAOH,GAAMY,UAAUE,WAAW,IAAK,KAC5DC,EAAUF,SAASV,EAAOH,GAAMe,QAAQD,WAAW,IAAK,KACxDE,EAAYH,SAASV,EAAOH,GAAMgB,UAAUF,WAAW,IAAK,KAC5DG,EAAQJ,SAASV,EAAOH,GAAMiB,MAAMH,WAAW,IAAK,KACpDI,EAAON,GAAaI,EAAYC,GACpCE,QAAQC,IAAIR,GACZF,EAAQ,CACN,CACEW,KAAM,qBACNC,eAAIV,EACJW,eAAIR,GAEN,CACEM,KAAM,qBACNC,eAAIJ,GAEN,CACEG,KAAM,2BACNC,eAAIN,GAEN,CACEK,KAAM,qBACNC,eAAIL,OAGP,CAACjB,IAEF,qCACE,sGACA,iCACE,0BAASwB,UAAU,KAAnB,UACE,0DACA,gCACE,mEAAarB,EAAM,MAAUS,UAA7B,OACA,uDAAWT,EAAM,MAAUa,UAA3B,QACA,uDAAWb,EAAM,MAAUc,MAA3B,UAEF,gCACE,mEAAad,EAAM,MAAUY,QAA7B,QACA,6DAAYZ,EAAM,MAAUsB,SAA5B,QACA,6DAAYtB,EAAM,MAAUuB,SAA5B,aAIJ,0BAASF,UAAU,OAAnB,UACE,iEACA,gCACE,wBAAQG,SAtDD,SAACC,GAChBT,QAAQC,IAAIQ,EAAEC,OAAOC,OACrB7B,EAAQ2B,EAAEC,OAAOC,QAoDT,SACGjC,EAASkC,KAAI,SAACC,GACb,OACE,wBAAqBF,MAAOE,EAAIxB,GAAhC,SACGwB,EAAIzB,IADMyB,EAAIxB,SAMvB,wHACA,kCACE,kCAAUL,EAAOH,GAAMK,cACvB,gCACE,+BACE,oDACA,oDACA,oDACA,yDAGJ,gCACE,+BACE,+BACGF,EAAOH,GAAMY,UADhB,WAC8BT,EAAOH,GAAMe,QAD3C,OAGA,+BAAKZ,EAAOH,GAAMgB,UAAlB,YACA,6BAAKb,EAAOH,GAAMiB,QAClB,+BAAKd,EAAOH,GAAMiC,WAAlB,qBAMV,qBAAKT,UAAU,QAAf,SACE,cAACU,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAO,OAAzC,SACE,eAACC,EAAA,EAAD,CACEF,MAAO,IACPC,OAAQ,IACR3B,KAAMA,EACN6B,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARZ,UAWE,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAKJ,QAAQ,eAAKK,QAAQ,IAAIC,KAAK,YACnC,cAACF,EAAA,EAAD,CAAKJ,QAAQ,eAAKK,QAAQ,IAAIC,KAAK,0BCxHlCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.acab0bbc.chunk.js","sourcesContent":["import corona from \"./corona.json\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nfunction App() {\n  let areaName = new Array();\n  let [city, setCity] = useState(\"seoul\");\n  for (let key in corona) {\n    // console.log(corona[key].countryName);\n    // console.log(key);\n    if (corona[key].countryName != undefined) {\n      areaName.push({ kr: corona[key].countryName, en: key });\n    }\n  }\n  //console.log(areaName[0].kr);\n  let areaChange = (e) => {\n    console.log(e.target.value);\n    setCity(e.target.value);\n  };\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    let totalCase = parseInt(corona[city].totalCase.replaceAll(\",\", \"\"));\n    let newCase = parseInt(corona[city].newCase.replaceAll(\",\", \"\"));\n    let recovered = parseInt(corona[city].recovered.replaceAll(\",\", \"\"));\n    let death = parseInt(corona[city].death.replaceAll(\",\", \"\"));\n    let care = totalCase - (recovered + death);\n    console.log(totalCase);\n    setData([\n      {\n        name: \"확진자\",\n        인원: totalCase,\n        추가: newCase,\n      },\n      {\n        name: \"검사중\",\n        인원: care,\n      },\n      {\n        name: \"격리해제\",\n        인원: recovered,\n      },\n      {\n        name: \"사망자\",\n        인원: death,\n      },\n    ]);\n  }, [city]);\n  return (\n    <>\n      <header>코로나바이러스 감염증-19</header>\n      <main>\n        <article className=\"ko\">\n          <h2>국내현황</h2>\n          <div>\n            <span>전체확진자({corona[\"korea\"].totalCase})</span>\n            <span>완치자({corona[\"korea\"].recovered}) </span>\n            <span>사망자({corona[\"korea\"].death})</span>\n          </div>\n          <div>\n            <span>일일확진자({corona[\"korea\"].newCase}) </span>\n            <span>국내거주({corona[\"korea\"].newCcase}) </span>\n            <span>해외거주({corona[\"korea\"].newFcase})</span>\n          </div>\n        </article>\n\n        <article className=\"area\">\n          <h2>지역별 현황</h2>\n          <div>\n            <select onChange={areaChange}>\n              {areaName.map((tit) => {\n                return (\n                  <option key={tit.en} value={tit.en}>\n                    {tit.kr}\n                  </option>\n                );\n              })}\n            </select>\n            <p>※ 원하시는 지역을 선택해주세요</p>\n            <table>\n              <caption>{corona[city].countryName}</caption>\n              <thead>\n                <tr>\n                  <th>확진자</th>\n                  <th>완치자</th>\n                  <th>사망자</th>\n                  <th>발생률</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>\n                    {corona[city].totalCase}명(+{corona[city].newCase})\n                  </td>\n                  <td>{corona[city].recovered}명</td>\n                  <td>{corona[city].death}</td>\n                  <td>{corona[city].percentage}%</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </article>\n        <div className=\"chart\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              width={500}\n              height={300}\n              data={data}\n              margin={{\n                top: 20,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"인원\" stackId=\"a\" fill=\"#8884d8\" />\n              <Bar dataKey=\"추가\" stackId=\"a\" fill=\"#82ca9d\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}